{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/strk/Sites/nextjs-dashboard/app/ui/button.tsx"],"sourcesContent":["import clsx from 'clsx';\n\ninterface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  children: React.ReactNode;\n}\n\nexport function Button({ children, className, ...rest }: ButtonProps) {\n  return (\n    <button\n      {...rest}\n      className={clsx(\n        'flex h-10 items-center rounded-lg bg-blue-500 px-4 text-sm font-medium text-white transition-colors hover:bg-blue-400 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-blue-500 active:bg-blue-600 aria-disabled:cursor-not-allowed aria-disabled:opacity-50',\n        className,\n      )}\n    >\n      {children}\n    </button>\n  );\n}\n"],"names":[],"mappings":";;;;AAAA;;;AAMO,SAAS,OAAO,EAAE,QAAQ,EAAE,SAAS,EAAE,GAAG,MAAmB;IAClE,qBACE,0bAAC;QACE,GAAG,IAAI;QACR,WAAW,CAAA,GAAA,sLAAA,CAAA,UAAI,AAAD,EACZ,kTACA;kBAGD;;;;;;AAGP"}},
    {"offset": {"line": 25, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 31, "column": 0}, "map": {"version":3,"sources":["file:///Users/strk/Sites/nextjs-dashboard/app/lib/actions.ts"],"sourcesContent":["'use server';\n\nimport { z } from 'zod';\nimport { sql } from '@vercel/postgres';\n\nconst FormSchema = z.object({\n  id: z.string(),\n  customerId: z.string(),\n  amount: z.coerce.number(),\n  status: z.enum(['pending', 'paid']),\n  date: z.string(),\n});\n\nconst CreateInvoice = FormSchema.omit({ id: true, date: true });\n\nexport async function createInvoice(formData: FormData) {\n  const { customerId, amount, status } = CreateInvoice.parse({\n    customerId: formData.get('customerId'),\n    amount: formData.get('amount'),\n    status: formData.get('status'),\n  });\n  const amountInCents = amount * 100;\n  const date = new Date().toISOString().split('T')[0];\n}\n"],"names":[],"mappings":";;;;;;AAEA;;;;AAGA,MAAM,aAAa,qLAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC1B,IAAI,qLAAA,CAAA,IAAC,CAAC,MAAM;IACZ,YAAY,qLAAA,CAAA,IAAC,CAAC,MAAM;IACpB,QAAQ,qLAAA,CAAA,IAAC,CAAC,MAAM,CAAC,MAAM;IACvB,QAAQ,qLAAA,CAAA,IAAC,CAAC,IAAI,CAAC;QAAC;QAAW;KAAO;IAClC,MAAM,qLAAA,CAAA,IAAC,CAAC,MAAM;AAChB;AAEA,MAAM,gBAAgB,WAAW,IAAI,CAAC;IAAE,IAAI;IAAM,MAAM;AAAK;AAEtD,eAAe,uCAAW,GAAX,cAAc,QAAkB;IACpD,MAAM,EAAE,UAAU,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG,cAAc,KAAK,CAAC;QACzD,YAAY,SAAS,GAAG,CAAC;QACzB,QAAQ,SAAS,GAAG,CAAC;QACrB,QAAQ,SAAS,GAAG,CAAC;IACvB;IACA,MAAM,gBAAgB,SAAS;IAC/B,MAAM,OAAO,IAAI,OAAO,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE;AACrD;;;IARsB;;AAAA,2bAAA"}},
    {"offset": {"line": 69, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 75, "column": 0}, "map": {"version":3,"sources":["file:///Users/strk/Sites/nextjs-dashboard/app/ui/invoices/create-form.tsx"],"sourcesContent":["import { CustomerField } from '@/app/lib/definitions';\nimport Link from 'next/link';\nimport {\n  CheckIcon,\n  ClockIcon,\n  CurrencyDollarIcon,\n  UserCircleIcon,\n} from '@heroicons/react/24/outline';\nimport { Button } from '@/app/ui/button';\nimport { createInvoice } from '@/app/lib/actions';\n\nexport default function Form({ customers }: { customers: CustomerField[] }) {\n  return (\n    <form action={createInvoice}>\n      <div className='rounded-md bg-gray-50 p-4 md:p-6'>\n        {/* Customer Name */}\n        <div className='mb-4'>\n          <label htmlFor='customer' className='mb-2 block text-sm font-medium'>\n            Choose customer\n          </label>\n          <div className='relative'>\n            <select\n              id='customer'\n              name='customerId'\n              className='peer block w-full cursor-pointer rounded-md border border-gray-200 py-2 pl-10 text-sm outline-2 placeholder:text-gray-500'\n              defaultValue=''\n            >\n              <option value='' disabled>\n                Select a customer\n              </option>\n              {customers.map((customer) => (\n                <option key={customer.id} value={customer.id}>\n                  {customer.name}\n                </option>\n              ))}\n            </select>\n            <UserCircleIcon className='pointer-events-none absolute left-3 top-1/2 h-[18px] w-[18px] -translate-y-1/2 text-gray-500' />\n          </div>\n        </div>\n\n        {/* Invoice Amount */}\n        <div className='mb-4'>\n          <label htmlFor='amount' className='mb-2 block text-sm font-medium'>\n            Choose an amount\n          </label>\n          <div className='relative mt-2 rounded-md'>\n            <div className='relative'>\n              <input\n                id='amount'\n                name='amount'\n                type='number'\n                step='0.01'\n                placeholder='Enter USD amount'\n                className='peer block w-full rounded-md border border-gray-200 py-2 pl-10 text-sm outline-2 placeholder:text-gray-500'\n              />\n              <CurrencyDollarIcon className='pointer-events-none absolute left-3 top-1/2 h-[18px] w-[18px] -translate-y-1/2 text-gray-500 peer-focus:text-gray-900' />\n            </div>\n          </div>\n        </div>\n\n        {/* Invoice Status */}\n        <fieldset>\n          <legend className='mb-2 block text-sm font-medium'>\n            Set the invoice status\n          </legend>\n          <div className='rounded-md border border-gray-200 bg-white px-[14px] py-3'>\n            <div className='flex gap-4'>\n              <div className='flex items-center'>\n                <input\n                  id='pending'\n                  name='status'\n                  type='radio'\n                  value='pending'\n                  className='h-4 w-4 cursor-pointer border-gray-300 bg-gray-100 text-gray-600 focus:ring-2'\n                />\n                <label\n                  htmlFor='pending'\n                  className='ml-2 flex cursor-pointer items-center gap-1.5 rounded-full bg-gray-100 px-3 py-1.5 text-xs font-medium text-gray-600'\n                >\n                  Pending <ClockIcon className='h-4 w-4' />\n                </label>\n              </div>\n              <div className='flex items-center'>\n                <input\n                  id='paid'\n                  name='status'\n                  type='radio'\n                  value='paid'\n                  className='h-4 w-4 cursor-pointer border-gray-300 bg-gray-100 text-gray-600 focus:ring-2'\n                />\n                <label\n                  htmlFor='paid'\n                  className='ml-2 flex cursor-pointer items-center gap-1.5 rounded-full bg-green-500 px-3 py-1.5 text-xs font-medium text-white'\n                >\n                  Paid <CheckIcon className='h-4 w-4' />\n                </label>\n              </div>\n            </div>\n          </div>\n        </fieldset>\n      </div>\n      <div className='mt-6 flex justify-end gap-4'>\n        <Link\n          href='/dashboard/invoices'\n          className='flex h-10 items-center rounded-lg bg-gray-100 px-4 text-sm font-medium text-gray-600 transition-colors hover:bg-gray-200'\n        >\n          Cancel\n        </Link>\n        <Button type='submit'>Create Invoice</Button>\n      </div>\n    </form>\n  );\n}\n"],"names":[],"mappings":";;;;AACA;AAOA;AACA;AAPA;AAAA;AAAA;AAAA;;;;;;AASe,SAAS,KAAK,EAAE,SAAS,EAAkC;IACxE,qBACE,0bAAC;QAAK,QAAQ,qHAAA,CAAA,gBAAa;;0BACzB,0bAAC;gBAAI,WAAU;;kCAEb,0bAAC;wBAAI,WAAU;;0CACb,0bAAC;gCAAM,SAAQ;gCAAW,WAAU;0CAAiC;;;;;;0CAGrE,0bAAC;gCAAI,WAAU;;kDACb,0bAAC;wCACC,IAAG;wCACH,MAAK;wCACL,WAAU;wCACV,cAAa;;0DAEb,0bAAC;gDAAO,OAAM;gDAAG,QAAQ;0DAAC;;;;;;4CAGzB,UAAU,GAAG,CAAC,CAAC,yBACd,0bAAC;oDAAyB,OAAO,SAAS,EAAE;8DACzC,SAAS,IAAI;mDADH,SAAS,EAAE;;;;;;;;;;;kDAK5B,0bAAC,gVAAA,CAAA,iBAAc;wCAAC,WAAU;;;;;;;;;;;;;;;;;;kCAK9B,0bAAC;wBAAI,WAAU;;0CACb,0bAAC;gCAAM,SAAQ;gCAAS,WAAU;0CAAiC;;;;;;0CAGnE,0bAAC;gCAAI,WAAU;0CACb,cAAA,0bAAC;oCAAI,WAAU;;sDACb,0bAAC;4CACC,IAAG;4CACH,MAAK;4CACL,MAAK;4CACL,MAAK;4CACL,aAAY;4CACZ,WAAU;;;;;;sDAEZ,0bAAC,wVAAA,CAAA,qBAAkB;4CAAC,WAAU;;;;;;;;;;;;;;;;;;;;;;;kCAMpC,0bAAC;;0CACC,0bAAC;gCAAO,WAAU;0CAAiC;;;;;;0CAGnD,0bAAC;gCAAI,WAAU;0CACb,cAAA,0bAAC;oCAAI,WAAU;;sDACb,0bAAC;4CAAI,WAAU;;8DACb,0bAAC;oDACC,IAAG;oDACH,MAAK;oDACL,MAAK;oDACL,OAAM;oDACN,WAAU;;;;;;8DAEZ,0bAAC;oDACC,SAAQ;oDACR,WAAU;;wDACX;sEACS,0bAAC,sUAAA,CAAA,YAAS;4DAAC,WAAU;;;;;;;;;;;;;;;;;;sDAGjC,0bAAC;4CAAI,WAAU;;8DACb,0bAAC;oDACC,IAAG;oDACH,MAAK;oDACL,MAAK;oDACL,OAAM;oDACN,WAAU;;;;;;8DAEZ,0bAAC;oDACC,SAAQ;oDACR,WAAU;;wDACX;sEACM,0bAAC,sUAAA,CAAA,YAAS;4DAAC,WAAU;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0BAOtC,0bAAC;gBAAI,WAAU;;kCACb,0bAAC,wWAAA,CAAA,UAAI;wBACH,MAAK;wBACL,WAAU;kCACX;;;;;;kCAGD,0bAAC,oHAAA,CAAA,SAAM;wBAAC,MAAK;kCAAS;;;;;;;;;;;;;;;;;;AAI9B"}},
    {"offset": {"line": 361, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 367, "column": 0}, "map": {"version":3,"sources":["file:///Users/strk/Sites/nextjs-dashboard/app/ui/invoices/breadcrumbs.tsx"],"sourcesContent":["import { clsx } from 'clsx';\nimport Link from 'next/link';\nimport { lusitana } from '@/app/ui/fonts';\n\ninterface Breadcrumb {\n  label: string;\n  href: string;\n  active?: boolean;\n}\n\nexport default function Breadcrumbs({\n  breadcrumbs,\n}: {\n  breadcrumbs: Breadcrumb[];\n}) {\n  return (\n    <nav aria-label=\"Breadcrumb\" className=\"mb-6 block\">\n      <ol className={clsx(lusitana.className, 'flex text-xl md:text-2xl')}>\n        {breadcrumbs.map((breadcrumb, index) => (\n          <li\n            key={breadcrumb.href}\n            aria-current={breadcrumb.active}\n            className={clsx(\n              breadcrumb.active ? 'text-gray-900' : 'text-gray-500',\n            )}\n          >\n            <Link href={breadcrumb.href}>{breadcrumb.label}</Link>\n            {index < breadcrumbs.length - 1 ? (\n              <span className=\"mx-3 inline-block\">/</span>\n            ) : null}\n          </li>\n        ))}\n      </ol>\n    </nav>\n  );\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AAAA;;;;;AAQe,SAAS,YAAY,EAClC,WAAW,EAGZ;IACC,qBACE,0bAAC;QAAI,cAAW;QAAa,WAAU;kBACrC,cAAA,0bAAC;YAAG,WAAW,CAAA,GAAA,sLAAA,CAAA,OAAI,AAAD,EAAE,mLAAA,CAAA,WAAQ,CAAC,SAAS,EAAE;sBACrC,YAAY,GAAG,CAAC,CAAC,YAAY,sBAC5B,0bAAC;oBAEC,gBAAc,WAAW,MAAM;oBAC/B,WAAW,CAAA,GAAA,sLAAA,CAAA,OAAI,AAAD,EACZ,WAAW,MAAM,GAAG,kBAAkB;;sCAGxC,0bAAC,wWAAA,CAAA,UAAI;4BAAC,MAAM,WAAW,IAAI;sCAAG,WAAW,KAAK;;;;;;wBAC7C,QAAQ,YAAY,MAAM,GAAG,kBAC5B,0bAAC;4BAAK,WAAU;sCAAoB;;;;;mCAClC;;mBATC,WAAW,IAAI;;;;;;;;;;;;;;;AAehC"}},
    {"offset": {"line": 422, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 524, "column": 0}, "map": {"version":3,"sources":["file:///Users/strk/Sites/nextjs-dashboard/app/lib/utils.ts"],"sourcesContent":["import { Revenue } from './definitions';\n\nexport const formatCurrency = (amount: number) => {\n  return (amount / 100).toLocaleString('en-US', {\n    style: 'currency',\n    currency: 'USD',\n  });\n};\n\nexport const formatDateToLocal = (\n  dateStr: string,\n  locale: string = 'en-US',\n) => {\n  const date = new Date(dateStr);\n  const options: Intl.DateTimeFormatOptions = {\n    day: 'numeric',\n    month: 'short',\n    year: 'numeric',\n  };\n  const formatter = new Intl.DateTimeFormat(locale, options);\n  return formatter.format(date);\n};\n\nexport const generateYAxis = (revenue: Revenue[]) => {\n  // Calculate what labels we need to display on the y-axis\n  // based on highest record and in 1000s\n  const yAxisLabels = [];\n  const highestRecord = Math.max(...revenue.map((month) => month.revenue));\n  const topLabel = Math.ceil(highestRecord / 1000) * 1000;\n\n  for (let i = topLabel; i >= 0; i -= 1000) {\n    yAxisLabels.push(`$${i / 1000}K`);\n  }\n\n  return { yAxisLabels, topLabel };\n};\n\nexport const generatePagination = (currentPage: number, totalPages: number) => {\n  // If the total number of pages is 7 or less,\n  // display all pages without any ellipsis.\n  if (totalPages <= 7) {\n    return Array.from({ length: totalPages }, (_, i) => i + 1);\n  }\n\n  // If the current page is among the first 3 pages,\n  // show the first 3, an ellipsis, and the last 2 pages.\n  if (currentPage <= 3) {\n    return [1, 2, 3, '...', totalPages - 1, totalPages];\n  }\n\n  // If the current page is among the last 3 pages,\n  // show the first 2, an ellipsis, and the last 3 pages.\n  if (currentPage >= totalPages - 2) {\n    return [1, 2, '...', totalPages - 2, totalPages - 1, totalPages];\n  }\n\n  // If the current page is somewhere in the middle,\n  // show the first page, an ellipsis, the current page and its neighbors,\n  // another ellipsis, and the last page.\n  return [\n    1,\n    '...',\n    currentPage - 1,\n    currentPage,\n    currentPage + 1,\n    '...',\n    totalPages,\n  ];\n};\n"],"names":[],"mappings":";;;;;;AAEO,MAAM,iBAAiB,CAAC;IAC7B,OAAO,CAAC,SAAS,GAAG,EAAE,cAAc,CAAC,SAAS;QAC5C,OAAO;QACP,UAAU;IACZ;AACF;AAEO,MAAM,oBAAoB,CAC/B,SACA,SAAiB,OAAO;IAExB,MAAM,OAAO,IAAI,KAAK;IACtB,MAAM,UAAsC;QAC1C,KAAK;QACL,OAAO;QACP,MAAM;IACR;IACA,MAAM,YAAY,IAAI,KAAK,cAAc,CAAC,QAAQ;IAClD,OAAO,UAAU,MAAM,CAAC;AAC1B;AAEO,MAAM,gBAAgB,CAAC;IAC5B,yDAAyD;IACzD,uCAAuC;IACvC,MAAM,cAAc,EAAE;IACtB,MAAM,gBAAgB,KAAK,GAAG,IAAI,QAAQ,GAAG,CAAC,CAAC,QAAU,MAAM,OAAO;IACtE,MAAM,WAAW,KAAK,IAAI,CAAC,gBAAgB,QAAQ;IAEnD,IAAK,IAAI,IAAI,UAAU,KAAK,GAAG,KAAK,KAAM;QACxC,YAAY,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,KAAK,CAAC,CAAC;IAClC;IAEA,OAAO;QAAE;QAAa;IAAS;AACjC;AAEO,MAAM,qBAAqB,CAAC,aAAqB;IACtD,6CAA6C;IAC7C,0CAA0C;IAC1C,IAAI,cAAc,GAAG;QACnB,OAAO,MAAM,IAAI,CAAC;YAAE,QAAQ;QAAW,GAAG,CAAC,GAAG,IAAM,IAAI;IAC1D;IAEA,kDAAkD;IAClD,uDAAuD;IACvD,IAAI,eAAe,GAAG;QACpB,OAAO;YAAC;YAAG;YAAG;YAAG;YAAO,aAAa;YAAG;SAAW;IACrD;IAEA,iDAAiD;IACjD,uDAAuD;IACvD,IAAI,eAAe,aAAa,GAAG;QACjC,OAAO;YAAC;YAAG;YAAG;YAAO,aAAa;YAAG,aAAa;YAAG;SAAW;IAClE;IAEA,kDAAkD;IAClD,wEAAwE;IACxE,uCAAuC;IACvC,OAAO;QACL;QACA;QACA,cAAc;QACd;QACA,cAAc;QACd;QACA;KACD;AACH"}},
    {"offset": {"line": 605, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 611, "column": 0}, "map": {"version":3,"sources":["file:///Users/strk/Sites/nextjs-dashboard/app/lib/data.ts"],"sourcesContent":["import { db } from '@vercel/postgres';\nimport {\n  CustomerField,\n  CustomersTableType,\n  InvoiceForm,\n  InvoicesTable,\n  LatestInvoiceRaw,\n  Revenue,\n} from './definitions';\nimport { formatCurrency } from './utils';\n\nconst client = await db.connect();\n\nexport async function fetchRevenue() {\n  try {\n    // Artificially delay a response for demo purposes.\n    // Don't do this in production :)\n\n    console.log('Fetching revenue data...');\n    await new Promise((resolve) => setTimeout(resolve, 3000));\n\n    const data = await client.sql<Revenue>`SELECT * FROM revenue`;\n\n    console.log('Data fetch completed after 3 seconds.');\n\n    return data.rows;\n  } catch (error) {\n    console.error('Database Error:', error);\n    throw new Error('Failed to fetch revenue data.');\n  }\n}\n\nexport async function fetchLatestInvoices() {\n  try {\n    const data = await client.sql<LatestInvoiceRaw>`\n      SELECT invoices.amount, customers.name, customers.image_url, customers.email, invoices.id\n      FROM invoices\n      JOIN customers ON invoices.customer_id = customers.id\n      ORDER BY invoices.date DESC\n      LIMIT 5`;\n\n    const latestInvoices = data.rows.map((invoice) => ({\n      ...invoice,\n      amount: formatCurrency(invoice.amount),\n    }));\n    return latestInvoices;\n  } catch (error) {\n    console.error('Database Error:', error);\n    throw new Error('Failed to fetch the latest invoices.');\n  }\n}\n\nexport async function fetchCardData() {\n  try {\n    // You can probably combine these into a single SQL query\n    // However, we are intentionally splitting them to demonstrate\n    // how to initialize multiple queries in parallel with JS.\n    const invoiceCountPromise = client.sql`SELECT COUNT(*) FROM invoices`;\n    const customerCountPromise = client.sql`SELECT COUNT(*) FROM customers`;\n    const invoiceStatusPromise = client.sql`SELECT\n         SUM(CASE WHEN status = 'paid' THEN amount ELSE 0 END) AS \"paid\",\n         SUM(CASE WHEN status = 'pending' THEN amount ELSE 0 END) AS \"pending\"\n         FROM invoices`;\n\n    const data = await Promise.all([\n      invoiceCountPromise,\n      customerCountPromise,\n      invoiceStatusPromise,\n    ]);\n\n    const numberOfInvoices = Number(data[0].rows[0].count ?? '0');\n    const numberOfCustomers = Number(data[1].rows[0].count ?? '0');\n    const totalPaidInvoices = formatCurrency(data[2].rows[0].paid ?? '0');\n    const totalPendingInvoices = formatCurrency(data[2].rows[0].pending ?? '0');\n\n    return {\n      numberOfCustomers,\n      numberOfInvoices,\n      totalPaidInvoices,\n      totalPendingInvoices,\n    };\n  } catch (error) {\n    console.error('Database Error:', error);\n    throw new Error('Failed to fetch card data.');\n  }\n}\n\nconst ITEMS_PER_PAGE = 6;\nexport async function fetchFilteredInvoices(\n  query: string,\n  currentPage: number\n) {\n  const offset = (currentPage - 1) * ITEMS_PER_PAGE;\n\n  try {\n    const invoices = await client.sql<InvoicesTable>`\n      SELECT\n        invoices.id,\n        invoices.amount,\n        invoices.date,\n        invoices.status,\n        customers.name,\n        customers.email,\n        customers.image_url\n      FROM invoices\n      JOIN customers ON invoices.customer_id = customers.id\n      WHERE\n        customers.name ILIKE ${`%${query}%`} OR\n        customers.email ILIKE ${`%${query}%`} OR\n        invoices.amount::text ILIKE ${`%${query}%`} OR\n        invoices.date::text ILIKE ${`%${query}%`} OR\n        invoices.status ILIKE ${`%${query}%`}\n      ORDER BY invoices.date DESC\n      LIMIT ${ITEMS_PER_PAGE} OFFSET ${offset}\n    `;\n\n    return invoices.rows;\n  } catch (error) {\n    console.error('Database Error:', error);\n    throw new Error('Failed to fetch invoices.');\n  }\n}\n\nexport async function fetchInvoicesPages(query: string) {\n  try {\n    const count = await client.sql`SELECT COUNT(*)\n    FROM invoices\n    JOIN customers ON invoices.customer_id = customers.id\n    WHERE\n      customers.name ILIKE ${`%${query}%`} OR\n      customers.email ILIKE ${`%${query}%`} OR\n      invoices.amount::text ILIKE ${`%${query}%`} OR\n      invoices.date::text ILIKE ${`%${query}%`} OR\n      invoices.status ILIKE ${`%${query}%`}\n  `;\n\n    const totalPages = Math.ceil(Number(count.rows[0].count) / ITEMS_PER_PAGE);\n    return totalPages;\n  } catch (error) {\n    console.error('Database Error:', error);\n    throw new Error('Failed to fetch total number of invoices.');\n  }\n}\n\nexport async function fetchInvoiceById(id: string) {\n  try {\n    const data = await client.sql<InvoiceForm>`\n      SELECT\n        invoices.id,\n        invoices.customer_id,\n        invoices.amount,\n        invoices.status\n      FROM invoices\n      WHERE invoices.id = ${id};\n    `;\n\n    const invoice = data.rows.map((invoice) => ({\n      ...invoice,\n      // Convert amount from cents to dollars\n      amount: invoice.amount / 100,\n    }));\n\n    return invoice[0];\n  } catch (error) {\n    console.error('Database Error:', error);\n    throw new Error('Failed to fetch invoice.');\n  }\n}\n\nexport async function fetchCustomers() {\n  try {\n    const data = await client.sql<CustomerField>`\n      SELECT\n        id,\n        name\n      FROM customers\n      ORDER BY name ASC\n    `;\n\n    const customers = data.rows;\n    return customers;\n  } catch (err) {\n    console.error('Database Error:', err);\n    throw new Error('Failed to fetch all customers.');\n  }\n}\n\nexport async function fetchFilteredCustomers(query: string) {\n  try {\n    const data = await client.sql<CustomersTableType>`\n\t\tSELECT\n\t\t  customers.id,\n\t\t  customers.name,\n\t\t  customers.email,\n\t\t  customers.image_url,\n\t\t  COUNT(invoices.id) AS total_invoices,\n\t\t  SUM(CASE WHEN invoices.status = 'pending' THEN invoices.amount ELSE 0 END) AS total_pending,\n\t\t  SUM(CASE WHEN invoices.status = 'paid' THEN invoices.amount ELSE 0 END) AS total_paid\n\t\tFROM customers\n\t\tLEFT JOIN invoices ON customers.id = invoices.customer_id\n\t\tWHERE\n\t\t  customers.name ILIKE ${`%${query}%`} OR\n        customers.email ILIKE ${`%${query}%`}\n\t\tGROUP BY customers.id, customers.name, customers.email, customers.image_url\n\t\tORDER BY customers.name ASC\n\t  `;\n\n    const customers = data.rows.map((customer) => ({\n      ...customer,\n      total_pending: formatCurrency(customer.total_pending),\n      total_paid: formatCurrency(customer.total_paid),\n    }));\n\n    return customers;\n  } catch (err) {\n    console.error('Database Error:', err);\n    throw new Error('Failed to fetch customer table.');\n  }\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 807, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 814, "column": 0}, "map": {"version":3,"sources":["file:///Users/strk/Sites/nextjs-dashboard/app/dashboard/invoices/create/page.tsx"],"sourcesContent":["import Form from '@/app/ui/invoices/create-form';\nimport Breadcrumbs from '@/app/ui/invoices/breadcrumbs';\nimport { fetchCustomers } from '@/app/lib/data';\n\nexport default async function Page() {\n  const customers = await fetchCustomers();\n\n  return (\n    <main>\n      <Breadcrumbs\n        breadcrumbs={[\n          { label: 'Invoices', href: '/dashboard/invoices' },\n          {\n            label: 'Create Invoice',\n            href: '/dashboard/invoices/create',\n            active: true,\n          },\n        ]}\n      />\n      <Form customers={customers} />\n    </main>\n  );\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;;;;;;AAEe,eAAe;IAC5B,MAAM,YAAY,MAAM,CAAA,GAAA,kHAAA,CAAA,iBAAc,AAAD;IAErC,qBACE,0bAAC;;0BACC,0bAAC,qIAAA,CAAA,UAAW;gBACV,aAAa;oBACX;wBAAE,OAAO;wBAAY,MAAM;oBAAsB;oBACjD;wBACE,OAAO;wBACP,MAAM;wBACN,QAAQ;oBACV;iBACD;;;;;;0BAEH,0bAAC,wIAAA,CAAA,UAAI;gBAAC,WAAW;;;;;;;;;;;;AAGvB"}},
    {"offset": {"line": 864, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 877, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 879, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}